/*
Largest subarray of 0's and 1's

Given an array of 0s and 1s. Find the length of the largest subarray with equal number of 0s and 1s.

Example 1:

Input:
N = 4
A[] = {0,1,0,1}
Output: 4
Explanation: The array from index [0...3]
contains equal number of 0's and 1's.
Thus maximum length of subarray having
equal number of 0's and 1's is 4.

Example 2:

Input:
N = 5
A[] = {0,0,1,0,0}
Output: 2

Your Task:
You don't need to read input or print anything. Your task is to complete the function maxLen() which takes the array arr[] and the size of the array as inputs and returns the length of the largest subarray with equal number of 0s and 1s.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N).

Constraints:
1 <= N <= 105
0 <= A[] <= 1
*/

//code goes here
#include <bits/stdc++.h>
using namespace std;

int maxLen(int arr[], int n);

int main()
{
    // your code goes here
    int T;
    cin >> T;
    while (T--)
    {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++)
            cin >> a[i];
        cout << maxLen(a, n) << endl;
    }
    return 0;
}// } Driver Code Ends


/*You are required to complete this method*/

// arr[] : the input array containing 0s and 1s
// N : size of the input array

// return the maximum length of the subarray
// with equal 0s and 1s
int maxLen(int a[], int n)
{
    // Your code here
    int i;
    int c=0;
    for(i=0;i<n;i++)
    {
        if(!a[i])
        {a[i]=-1;
        c++;
        }
    }
    int nxs[n];
    int s=0;
    for(i=0;i<n;i++)
    {
     nxs[i]=s+a[i];
        s=nxs[i];
    }
    if(s==0)
    return n;
    unordered_map<int,int> m1;
    
    int maxi=0;
    for(i=0;i<n;i++)
    {
        if(nxs[i]==0)
        maxi=i+1;
        if(m1[nxs[i]])
        {
            maxi=max(i-(m1[nxs[i]]-1),maxi);
        }
else
        m1[nxs[i]]=i+1;
    
       
      // cout<<nxs[i];
    }
    return maxi;
}
